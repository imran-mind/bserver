/**
 * @author: vinayak.sharan@47billion.com
 * The file contains the login API to ensure
 * user is authentic or not.
 */

'use strict'

var config = require('config'),
    log = require('app/utils/logger')(module),
    model = require('app/models/index'),
    jwt = require('jwt-simple'),
    auth = require('app/helpers/auth'),
    bcrypt = require('bcrypt'),
    async = require('async'),
    C = require('app/helpers/constant'),
    M = require('app/models');

var user = {
    login: login,
    signUp: signUp,
    updateUser : updateUser
}

function login(req, res, next) {
    var username = req.body.username;
    var password = req.body.password;

    req.app.get('models').LoginUser
        .findOne({
            where: {username: username}
        })
        .then(function (user) {
            if (!user) {
                return res.status(403).send({success: false, msg: C.ERROR_MESSAGE.WRONG_USERNAME});
            }
            req.app.get('models').LoginUser.comparePassword(password, user.password, function (err, isMatch) {
                if (isMatch && !err) {
                    // if user is found and password is right create a token
                    var token = auth.createJWT(user);
                    // return the information including token as JSON
                    return res.status(200).json({success: true, token: token});
                }
                return res.status(403).send({success: false, msg: C.ERROR_MESSAGE.WRONG_PASSWORD});
            });

        }, function (err) {
            log.error(C.ERROR_MESSAGE.FAILED_LOGIN_PROCESS, err);
            return res.status(200).json({valid: false, message: C.ERROR_MESSAGE.FAIL_DB_INSERT});
        });

}

// create a new Admin account (POST http://localhost:8080/api/o/v1/signup)
function signUp(req, res, next) {
    var username = req.body.username;
    var password = req.body.password;
    var input = req.body;
    if (!username || !password) {
        return res.status(403).json({success: false, message: C.ERROR_MESSAGE.ENTER_USERNAME_PASSWORD});
    }

    async.waterfall([encryptPassword.bind(null, password, input),
        save.bind(null)], function (err) {
        if (err) {
            return res.status(500).json({success: false, message: err.message ? err.message : err});
        }
        return res.status(201).json({success: true, message: C.RESPONSE_MESSAGE.USER_CREATED});
    });

};


// create a new Admin account (POST http://localhost:8080/api/o/v1/signup)
function updateUser(req, res, next) {
    var input = req.body;
    var username = input.username;
    var password = input.password;

    if (!username || !password) {
        return res.status(403).json({success: false, message: C.ERROR_MESSAGE.ENTER_USERNAME_PASSWORD});
    }

    async.waterfall([encryptPassword.bind(null, password, input),
        update.bind(null)], function (err) {
        if (err) {
            return res.status(500).json({success: false, message: err.message ? err.message : err});
        }
        return res.status(201).json({success: true, message: C.RESPONSE_MESSAGE.USER_CREATED});
    });

};



// create a new Admin account (POST http://localhost:8080/api/o/v1/signup)
function changePassword(req, res, next) {
    var username = req.body.username;
    var password = req.body.password;
    var input = req.body;
    if (!username || !password) {
        return res.status(403).json({success: false, message: C.ERROR_MESSAGE.ENTER_USERNAME_PASSWORD});
    }

    async.waterfall([encryptPassword.bind(null, password, input),
        save.bind(null)], function (err) {
        if (err) {
            return res.status(500).json({success: false, message: err.message ? err.message : err});
        }
        return res.status(201).json({success: true, message: C.RESPONSE_MESSAGE.USER_CREATED});
    });

};

var encryptPassword = function (password, input, cb) {
    bcrypt.genSalt(10, function (err, salt) {
        if (err) {
            return cb(err);
        }
        bcrypt.hash(password, salt, function (err, hash) {
            if (err) {
                return cb(err);
            }
            input.password = hash;
            return cb(err, input);

        });
    });

};

var save = function (data, cb) {
    M.LoginUser.build(data).save()
        .then(function () {
            return cb();
        }, function (err) {
            return cb(err);
        });
};

var update = function (data, cb) {
    M.LoginUser.update(data,{
        where: {username: data.username}
    })
        .then(function () {
            return cb();
        }, function (err) {
            return cb(err);
        });
};

module.exports = user;
